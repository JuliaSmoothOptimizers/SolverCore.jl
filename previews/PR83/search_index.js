var documenterSearchIndex = {"docs":
[{"location":"jso-compliant/#JSO-compliant-solvers","page":"JSO-compliant solvers","title":"JSO-compliant solvers","text":"","category":"section"},{"location":"jso-compliant/","page":"JSO-compliant solvers","title":"JSO-compliant solvers","text":"The following are JSO-compliance expectations and recommendations that are implemented in JuliaSmoothOptimizers.","category":"page"},{"location":"jso-compliant/#Mandatory","page":"JSO-compliant solvers","title":"Mandatory","text":"","category":"section"},{"location":"jso-compliant/","page":"JSO-compliant solvers","title":"JSO-compliant solvers","text":"Create a function solver_name(nlp::AbstractNLPModel; kwargs...) that returns a GenericExecutionStats.","category":"page"},{"location":"jso-compliant/#Recommended","page":"JSO-compliant solvers","title":"Recommended","text":"","category":"section"},{"location":"jso-compliant/","page":"JSO-compliant solvers","title":"JSO-compliant solvers","text":"Create a solver object SolverName <: SolverCore.AbstractOptimizationSolver.\nStore all memory-allocating things inside this object. This includes vectors, matrices, and possibly other objects.\nOne of these objects should be solver.x, that stores the current iterate.\nImplement a constructor SolverName(nlp; kwargs...).\nImplement SolverCore.solve!(solver, nlp::AbstractNLPModel, stats::GenericExecutionStats) and change solver_name to create a SolverName object and call solve!.\nMake sure that solve! is not allocating.\nAccept the following keyword arguments (T is float type and V is the container type):\nx::V = nlp.meta.x0: The starting point.\natol::T = sqrt(eps(T)): Absolute tolerance for the gradient. Use in conjunction with the relative tolerance below to check Vert nabla f(x_k)Vert leq epsilon_a + epsilon_rVert nabla f(x_0)Vert.\nrtol::T = sqrt(eps(T)): Relative tolerance for the gradient. See atol above.\nmax_eval::Int = -1: Maximum number of objective function evaluation plus constraint function evaluations. Negative number means unlimited.\nmax_iter::Int = typemax(Int): Maximum number of iterations.\nmax_time::Float64 = 30.0: Maximum elapsed time.\nverbose::Int = 0: Verbosity level. 0 means nothing and 1 means something. There are no rules on the level of verbosity yet.\ncallback = (nlp, solver, stats) -> nothing: A callback function to be called at the end of an iteration, before exit status are defined.\nUse set_status! and get_status to update stats before starting the method loop, and at the end of every iteration.\nCall the callback after running set_status! in both places.\nDefine done = stats.status != :unknown and loop with while !done.\nTo check for logic errors and stop the method use set_status!(stats, ...), done = true, and continue, where the second argument of set_status! is one of the statuses available in SolverCore.STATUSES. You can call SolverCore.show_statuses() to see them. If you need more specific statuses, create an issue.\nUse the set_...!(stats, ...) functions from SolverCore to update the stats. For instance, set_objective!(stats, f), set_time!(stats, time() - start_time), and set_dual_residual!(stats, gnorm).\nDon't log when verbose == 0. When logging, use @info log_header(...) and @info log_row(...).\nWrite docstrings for SolverName. The format is still a bit loose.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [SolverCore]","category":"page"},{"location":"reference/#SolverCore.AbstractSolver","page":"Reference","title":"SolverCore.AbstractSolver","text":"Abstract type from which JSO solvers derive.\n\n\n\n\n\n","category":"type"},{"location":"reference/#SolverCore.GenericExecutionStats","page":"Reference","title":"SolverCore.GenericExecutionStats","text":"GenericExecutionStats(nlp; ...)\nGenericExecutionStats{T, S, V, Tsp}(;...)\n\nA GenericExecutionStats is a struct for storing the output information of solvers. It contains the following fields:\n\nstatus: Indicates the output of the solver. Use show_statuses() for the full list;\nsolution: The final approximation returned by the solver (default: an uninitialized vector like nlp.meta.x0);\nobjective: The objective value at solution (default: Inf);\ndual_feas: The dual feasibility norm at solution (default: Inf);\nprimal_feas: The primal feasibility norm at solution (default: 0.0 if unconstrained, Inf otherwise);\nmultipliers: The Lagrange multipliers wrt to the constraints (default: an uninitialized vector like nlp.meta.y0);\nmultipliers_L: The Lagrange multipliers wrt to the lower bounds on the variables (default: an uninitialized vector like nlp.meta.x0 if there are bounds, or a zero-length vector if not);\nmultipliers_U: The Lagrange multipliers wrt to the upper bounds on the variables (default: an uninitialized vector like nlp.meta.x0 if there are bounds, or a zero-length vector if not);\niter: The number of iterations computed by the solver (default: -1);\nelapsed_time: The elapsed time computed by the solver (default: Inf);\nsolver_specific::Dict{Symbol,Any}: A solver specific dictionary.\n\nThe constructor preallocates storage for the fields above. Special storage may be used for multipliers_L and multipliers_U by passing them to the constructor. For instance, if a problem has few bound constraints, those multipliers could be held in sparse vectors.\n\nThe following fields indicate whether the information above has been updated and is reliable:\n\nsolution_reliable\nobjective_reliable\nresiduals_reliable (for dual_feas and primal_feas)\nmultipliers_reliable (for multipliers)\nbounds_multipliers_reliable (for multipliers_L and multipliers_U)\niter_reliable\ntime_reliable\nsolver_specific_reliable.\n\nSetting fields using one of the methods set_solution!(), set_objective!(), etc., also marks the field value as reliable.\n\nThe reset!() method marks all fields as unreliable.\n\nnlp is highly recommended to set default optional fields. If it is not provided, the function reset!(stats, nlp) should be called before solve!.\n\nAll other variables can be input as keyword arguments.\n\nNotice that GenericExecutionStats does not compute anything, it simply stores.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LinearOperators.reset!-Tuple{AbstractOptimizationSolver, NLPModels.AbstractNLPModel}","page":"Reference","title":"LinearOperators.reset!","text":"reset!(solver::AbstractOptimizationSolver, model::AbstractNLPModel)\n\nUse in the context of restarting or reusing the solver structure. Reset the internal fields of solver for the model before calling solve! on the same structure. model must have the same number of variables, bounds and constraints as that used to instantiate solver.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LinearOperators.reset!-Tuple{GenericExecutionStats}","page":"Reference","title":"LinearOperators.reset!","text":"reset!(stats::GenericExecutionStats)\nreset!(stats::GenericExecutionStats, nlp::AbstractNLPModel)\n\nReset the internal flags of stats to false to Indicate that the contents should not be trusted. If an AbstractNLPModel is also provided,  the pre-allocated vectors are adjusted to the problem size.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.broadcast_solver_specific!-Tuple{GenericExecutionStats, Symbol, Any}","page":"Reference","title":"SolverCore.broadcast_solver_specific!","text":"broadcast_solver_specific!(stats::GenericExecutionStats, field::Symbol, value)\n\nBroadcast value as a solver-specific value identified by field in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.get_status-Tuple{NLPModels.AbstractNLPModel}","page":"Reference","title":"SolverCore.get_status","text":"get_status(nlp, kwargs...)\n\nReturn the output of the solver based on the information in the keyword arguments. Use show_statuses() for the full list.\n\nThe keyword arguments may contain:\n\nelapsed_time::Float64 = 0.0: current elapsed time (default: 0.0);\niter::Integer = 0: current number of iterations (default: 0);\noptimal::Bool = false: true if the problem reached an optimal solution (default: false);\nsmall_residual::Bool = false: true if the nonlinear least squares problem reached a solution with small residual (default: false);\ninfeasible::Bool = false: true if the problem is infeasible (default: false);\nparameter_too_large::Bool = false: true if the parameters are loo large (default: false);\nunbounded::Bool = false: true if the problem is unbounded (default: false);\nstalled::Bool = false: true if the algorithm is stalling (default: false);\nmax_eval::Integer: limit on the number of evaluations defined by eval_fun (default: typemax(Int));\nmax_time::Float64 = Inf: limit on the time (default: Inf);\nmax_iter::Integer: limit on the number of iterations (default: typemax(Int)).\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.log_header-Tuple{AbstractVector{Symbol}, AbstractVector{DataType}}","page":"Reference","title":"SolverCore.log_header","text":"log_header(colnames, coltypes)\n\nCreates a header using the names in colnames formatted according to the types in coltypes. Uses internal formatting specification given by SolverCore.formats and default header translation given by SolverCore.default_headers.\n\nInput:\n\ncolnames::Vector{Symbol}: Column names.\ncoltypes::Vector{DataType}: Column types.\n\nKeyword arguments:\n\nhdr_override::Dict{Symbol,String}: Overrides the default headers.\ncolsep::Int: Number of spaces between columns (Default: 2)\n\nSee also log_row.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.log_row-Tuple{Any}","page":"Reference","title":"SolverCore.log_row","text":"log_row(vals)\n\nCreates a table row from the values on vals according to their types. Pass the names and types of vals to log_header for a logging table. Uses internal formatting specification given by SolverCore.formats.\n\nTo handle a missing value, add the type instead of the number:\n\n@info log_row(Any[1.0, 1])\n@info log_row(Any[Float64, Int])\n\nPrints\n\n[ Info:  1.0e+00       1\n[ Info:        -       -\n\nKeyword arguments:\n\ncolsep::Int: Number of spaces between columns (Default: 2)\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.set_bounds_multipliers!-Union{Tuple{V}, Tuple{S}, Tuple{T}, Tuple{GenericExecutionStats{T, S, V}, V, V}} where {T, S, V}","page":"Reference","title":"SolverCore.set_bounds_multipliers!","text":"set_bounds_multipliers!(stats::GenericExecutionStats{T, S, V}, zL::V, zU::V)\n\nRegister zL and zU as optimal multipliers associated to lower-bounded and upper-bounded constraints, respectively, in stats and mark them as reliable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.set_constraint_multipliers!-Union{Tuple{V}, Tuple{S}, Tuple{T}, Tuple{GenericExecutionStats{T, S, V}, S}} where {T, S, V}","page":"Reference","title":"SolverCore.set_constraint_multipliers!","text":"set_constraint_multipliers!(stats::GenericExecutionStats{T, S, V}, y::S, zL::V, zU::V)\n\nRegister y as optimal multipliers associated to general constraints in stats and mark them as reliable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.set_dual_residual!-Union{Tuple{V}, Tuple{S}, Tuple{T}, Tuple{GenericExecutionStats{T, S, V}, T}} where {T, S, V}","page":"Reference","title":"SolverCore.set_dual_residual!","text":"set_dual_residual!(stats::GenericExecutionStats{T, S, V}, dual::T)\n\nRegister dual as optimal dual feasibility residuals in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.set_iter!-Tuple{GenericExecutionStats, Int64}","page":"Reference","title":"SolverCore.set_iter!","text":"set_iter!(stats::GenericExecutionStats, iter::Int)\n\nRegister iter as optimal iteration number in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.set_multipliers!-Union{Tuple{V}, Tuple{S}, Tuple{T}, Tuple{GenericExecutionStats{T, S, V}, S, V, V}} where {T, S, V}","page":"Reference","title":"SolverCore.set_multipliers!","text":"set_multipliers!(stats::GenericExecutionStats{T, S, V}, y::S, zL::V, zU::V)\n\nRegister y, zL and zU as optimal multipliers associated to general constraints, lower-bounded and upper-bounded constraints, respectively, in stats and mark them as reliable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.set_objective!-Union{Tuple{V}, Tuple{S}, Tuple{T}, Tuple{GenericExecutionStats{T, S, V}, T}} where {T, S, V}","page":"Reference","title":"SolverCore.set_objective!","text":"set_objective!(stats::GenericExecutionStats{T, S, V}, val::T)\n\nRegister val as optimal objective value in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.set_primal_residual!-Union{Tuple{V}, Tuple{S}, Tuple{T}, Tuple{GenericExecutionStats{T, S, V}, T}} where {T, S, V}","page":"Reference","title":"SolverCore.set_primal_residual!","text":"set_primal_residual!(stats::GenericExecutionStats{T, S, V}, primal::T)\n\nRegister primal as optimal primal residuals in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.set_residuals!-Union{Tuple{V}, Tuple{S}, Tuple{T}, Tuple{GenericExecutionStats{T, S, V}, T, T}} where {T, S, V}","page":"Reference","title":"SolverCore.set_residuals!","text":"set_residuals!(stats::GenericExecutionStats{T, S, V}, primal::T, dual::T)\n\nRegister primal and dual as optimal primal and dual feasibility residuals, respectively, in stats and mark them as reliable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.set_solution!-Tuple{GenericExecutionStats, AbstractVector}","page":"Reference","title":"SolverCore.set_solution!","text":"set_solution!(stats::GenericExecutionStats, x::AbstractVector)\n\nRegister x as optimal solution in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.set_solver_specific!-Tuple{GenericExecutionStats, Symbol, Any}","page":"Reference","title":"SolverCore.set_solver_specific!","text":"set_solver_specific!(stats::GenericExecutionStats, field::Symbol, value)\n\nRegister value as a solver-specific value identified by field in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.set_status!-Tuple{GenericExecutionStats, Symbol}","page":"Reference","title":"SolverCore.set_status!","text":"set_status!(stats::GenericExecutionStats, status::Symbol)\n\nRegister status as final status in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.set_time!-Tuple{GenericExecutionStats, Float64}","page":"Reference","title":"SolverCore.set_time!","text":"set_time!(stats::GenericExecutionStats, time::Float64)\n\nRegister time as optimal solution time in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.show_statuses-Tuple{}","page":"Reference","title":"SolverCore.show_statuses","text":"show_statuses()\n\nShow the list of available statuses to use with GenericExecutionStats.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverCore.solve!-Tuple{AbstractOptimizationSolver, NLPModels.AbstractNLPModel}","page":"Reference","title":"SolverCore.solve!","text":"solve!(solver, model; kwargs...)\nsolve!(solver, model, stats; kwargs...)\n\nApply solver to model.\n\nArguments\n\nsolver::AbstractOptimizationSolver: solver structure to hold all storage necessary for a solve\nmodel::AbstractNLPModel: the model solved, see NLPModels.jl\nstats::GenericExecutionStats: stats structure to hold solution information.\n\nThe first invocation allocates and returns a new GenericExecutionStats. The second one fills out a preallocated stats structure and allows for efficient re-solves.\n\nThe kwargs are passed to the solver.\n\nReturn Value\n\nstats::GenericExecutionStats: stats structure holding solution information.\n\n\n\n\n\n","category":"method"},{"location":"#Home","page":"Home","title":"SolverCore.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Core package to build novel optimization algorithms in Julia.","category":"page"}]
}
