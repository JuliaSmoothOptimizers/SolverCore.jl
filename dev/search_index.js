var documenterSearchIndex = {"docs":
[{"location":"1-jso-compliant/#JSO-compliant-solvers","page":"JSO-compliant solvers","title":"JSO-compliant solvers","text":"","category":"section"},{"location":"1-jso-compliant/","page":"JSO-compliant solvers","title":"JSO-compliant solvers","text":"The following are JSO-compliance expectations and recommendations that are implemented in JuliaSmoothOptimizers.","category":"page"},{"location":"1-jso-compliant/#Mandatory","page":"JSO-compliant solvers","title":"Mandatory","text":"","category":"section"},{"location":"1-jso-compliant/","page":"JSO-compliant solvers","title":"JSO-compliant solvers","text":"Create a function solver_name(nlp::AbstractNLPModel; kwargs...) that returns a GenericExecutionStats.","category":"page"},{"location":"1-jso-compliant/#Recommended","page":"JSO-compliant solvers","title":"Recommended","text":"","category":"section"},{"location":"1-jso-compliant/","page":"JSO-compliant solvers","title":"JSO-compliant solvers","text":"Create a solver object SolverName <: SolverCore.AbstractOptimizationSolver.\nStore all memory-allocating things inside this object. This includes vectors, matrices, and possibly other objects.\nOne of these objects should be solver.x, that stores the current iterate.\nImplement a constructor SolverName(nlp; kwargs...).\nImplement SolverCore.solve!(solver, nlp::AbstractNLPModel, stats::GenericExecutionStats) and change solver_name to create a SolverName object and call solve!.\nMake sure that solve! is not allocating.\nAccept the following keyword arguments (T is float type and V is the container type):\nx::V = nlp.meta.x0: The starting point.\natol::T = sqrt(eps(T)): Absolute tolerance for the gradient. Use in conjunction with the relative tolerance below to check Vert nabla f(x_k)Vert leq epsilon_a + epsilon_rVert nabla f(x_0)Vert.\nrtol::T = sqrt(eps(T)): Relative tolerance for the gradient. See atol above.\nmax_eval::Int = -1: Maximum number of objective function evaluation plus constraint function evaluations. Negative number means unlimited.\nmax_iter::Int = typemax(Int): Maximum number of iterations.\nmax_time::Float64 = 30.0: Maximum elapsed time.\nverbose::Int = 0: Verbosity level. 0 means nothing and 1 means something. There are no rules on the level of verbosity yet.\ncallback = (nlp, solver, stats) -> nothing: A callback function to be called at the end of an iteration, before exit status are defined.\nUse set_status! and get_status to update stats before starting the method loop, and at the end of every iteration.\nCall the callback after running set_status! in both places.\nDefine done = stats.status != :unknown and loop with while !done.\nTo check for logic errors and stop the method use set_status!(stats, ...), done = true, and continue, where the second argument of set_status! is one of the statuses available in SolverCore.STATUSES. You can call SolverCore.show_statuses() to see them. If you need more specific statuses, create an issue.\nUse the set_...!(stats, ...) functions from SolverCore to update the stats. For instance, set_objective!(stats, f), set_time!(stats, time() - start_time), and set_dual_residual!(stats, gnorm).\nDon't log when verbose == 0. When logging, use @info log_header(...) and @info log_row(...).\nWrite docstrings for SolverName. The format is still a bit loose.","category":"page"},{"location":"91-developer/#dev_docs","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"note: Contributing guidelines\nIf you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If you want to make contributions to this package that involves code, then this guide is for you.","category":"page"},{"location":"91-developer/#First-time-clone","page":"Developer documentation","title":"First time clone","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: If you have writing rights\nIf you have writing rights, you don't have to fork. Instead, simply clone and skip ahead. Whenever upstream is mentioned, use origin instead.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add upstream https://github.com/JuliaSmoothOptimizers/SolverCore.jl","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"This will ensure that you have two remotes in your git: origin and upstream. You will create branches and push to origin, and you will fetch and update your local main branch from upstream.","category":"page"},{"location":"91-developer/#Linting-and-formatting","page":"Developer documentation","title":"Linting and formatting","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # Press ]\npkg> activate\npkg> add JuliaFormatter","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit install","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit run -a","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"91-developer/#Testing","page":"Developer documentation","title":"Testing","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"As with most Julia packages, you can just open Julia in the repository folder, activate the environment, and run test:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # press ]\npkg> activate .\npkg> test","category":"page"},{"location":"91-developer/#Working-on-a-new-issue","page":"Developer documentation","title":"Working on a new issue","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We try to keep a linear history in this repo, so it is important to keep your branches up-to-date.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fetch from the remote and fast-forward your local main\ngit fetch upstream\ngit switch main\ngit merge --ff-only upstream/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"91-developer/#Branch-naming","page":"Developer documentation","title":"Branch naming","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"91-developer/#Commit-message","page":"Developer documentation","title":"Commit message","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nWhen necessary, add a body with details.\nIf there are breaking changes, add the information to the commit message.","category":"page"},{"location":"91-developer/#Before-creating-a-pull-request","page":"Developer documentation","title":"Before creating a pull request","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: Atomic git commits\nTry to create \"atomic git commits\" (recommended reading: The Utopic Git History).","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Make sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\ngit fetch upstream\ngit rebase upstream/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"91-developer/#Building-and-viewing-the-documentation-locally","page":"Developer documentation","title":"Building and viewing the documentation locally","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Following the latest suggestions, we recommend using LiveServer to build the documentation. Here is how you do it:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Run julia --project=docs to open Julia in the environment of the docs.\nIf this is the first time building the docs\nPress ] to enter pkg mode\nRun pkg> dev . to use the development version of your package\nPress backspace to leave pkg mode\nRun julia> using LiveServer\nRun julia> servedocs()","category":"page"},{"location":"91-developer/#Making-a-new-release","page":"Developer documentation","title":"Making a new release","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To create a new release, you can follow these simple steps:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Create a branch release-x.y.z\nUpdate version in Project.toml\nUpdate the CHANGELOG.md:\nRename the section \"Unreleased\" to \"[x.y.z] - yyyy-mm-dd\" (i.e., version under brackets, dash, and date in ISO format)\nAdd a new section on top of it named \"Unreleased\"\nAdd a new link in the bottom for version \"x.y.z\"\nChange the \"[unreleased]\" link to use the latest version - end of line, vx.y.z ... HEAD.\nCreate a commit \"Release vx.y.z\", push, create a PR, wait for it to pass, merge the PR.\nGo back to main screen and click on the latest commit (link: https://github.com/JuliaSmoothOptimizers/SolverCore.jl/commit/main)\nAt the bottom, write @JuliaRegistrator register","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"After that, you only need to wait and verify:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Wait for the bot to comment (should take < 1m) with a link to a PR to the registry\nFollow the link and wait for a comment on the auto-merge\nThe comment should said all is well and auto-merge should occur shortly\nAfter the merge happens, TagBot will trigger and create a new GitHub tag. Check on https://github.com/JuliaSmoothOptimizers/SolverCore.jl/releases\nAfter the release is create, a \"docs\" GitHub action will start for the tag.\nAfter it passes, a deploy action will run.\nAfter that runs, the stable docs should be updated. Check them and look for the version number.","category":"page"},{"location":"95-reference/#reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"95-reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Modules = [SolverCore]","category":"page"},{"location":"95-reference/#SolverCore.AbstractSolver","page":"Reference","title":"SolverCore.AbstractSolver","text":"Abstract type from which JSO solvers derive.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#SolverCore.GenericExecutionStats","page":"Reference","title":"SolverCore.GenericExecutionStats","text":"GenericExecutionStats(nlp; ...)\nGenericExecutionStats{T, S, V, Tsp}(;...)\n\nA GenericExecutionStats is a struct for storing the output information of solvers. It contains the following fields:\n\nstatus: Indicates the output of the solver. Use show_statuses() for the full list;\nsolution: The final approximation returned by the solver (default: an uninitialized vector like nlp.meta.x0);\nobjective: The objective value at solution (default: Inf);\ndual_feas: The dual feasibility norm at solution (default: Inf);\nprimal_feas: The primal feasibility norm at solution (default: 0.0 if unconstrained, Inf otherwise);\nmultipliers: The Lagrange multipliers wrt to the constraints (default: an uninitialized vector like nlp.meta.y0);\nmultipliers_L: The Lagrange multipliers wrt to the lower bounds on the variables (default: an uninitialized vector like nlp.meta.x0 if there are bounds, or a zero-length vector if not);\nmultipliers_U: The Lagrange multipliers wrt to the upper bounds on the variables (default: an uninitialized vector like nlp.meta.x0 if there are bounds, or a zero-length vector if not);\niter: The number of iterations computed by the solver (default: -1);\nelapsed_time: The elapsed time computed by the solver (default: Inf);\nsolver_specific::Dict{Symbol,Any}: A solver specific dictionary.\n\nThe constructor preallocates storage for the fields above. Special storage may be used for multipliers_L and multipliers_U by passing them to the constructor. For instance, if a problem has few bound constraints, those multipliers could be held in sparse vectors.\n\nThe following fields indicate whether the information above has been updated and is reliable:\n\nsolution_reliable\nobjective_reliable\nresiduals_reliable (for dual_feas and primal_feas)\nmultipliers_reliable (for multipliers)\nbounds_multipliers_reliable (for multipliers_L and multipliers_U)\niter_reliable\ntime_reliable\nsolver_specific_reliable.\n\nSetting fields using one of the methods set_solution!(), set_objective!(), etc., also marks the field value as reliable.\n\nThe reset!() method marks all fields as unreliable.\n\nnlp is highly recommended to set default optional fields. If it is not provided, the function reset!(stats, nlp) should be called before solve!.\n\nAll other variables can be input as keyword arguments.\n\nNotice that GenericExecutionStats does not compute anything, it simply stores.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#SolverCore.broadcast_solver_specific!-Tuple{GenericExecutionStats, Symbol, Any}","page":"Reference","title":"SolverCore.broadcast_solver_specific!","text":"broadcast_solver_specific!(stats::GenericExecutionStats, field::Symbol, value)\n\nBroadcast value as a solver-specific value identified by field in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.get_status-Tuple{Any}","page":"Reference","title":"SolverCore.get_status","text":"get_status(problem, kwargs...)\n\nReturn the output of the solver based on the information in the keyword arguments. Use show_statuses() for the full list.\n\nThe keyword arguments may contain:\n\nelapsed_time::Float64 = 0.0: current elapsed time (default: 0.0);\niter::Integer = 0: current number of iterations (default: 0);\noptimal::Bool = false: true if the problem reached an optimal solution (default: false);\nsmall_residual::Bool = false: true if the nonlinear least squares problem reached a solution with small residual (default: false);\ninfeasible::Bool = false: true if the problem is infeasible (default: false);\nparameter_too_large::Bool = false: true if the parameters are loo large (default: false);\nunbounded::Bool = false: true if the problem is unbounded (default: false);\nstalled::Bool = false: true if the algorithm is stalling (default: false);\nmax_eval::Integer: limit on the number of evaluations defined by eval_fun (default: typemax(Int));\nmax_time::Float64 = Inf: limit on the time (default: Inf);\nmax_iter::Integer: limit on the number of iterations (default: typemax(Int)).\n\nThe problem is used to check number of evaluations with SolverCore.eval_fun(problem).\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.log_header-Tuple{AbstractVector{Symbol}, AbstractVector{DataType}}","page":"Reference","title":"SolverCore.log_header","text":"log_header(colnames, coltypes)\n\nCreates a header using the names in colnames formatted according to the types in coltypes. Uses internal formatting specification given by SolverCore.formats and default header translation given by SolverCore.default_headers.\n\nInput:\n\ncolnames::Vector{Symbol}: Column names.\ncoltypes::Vector{DataType}: Column types.\n\nKeyword arguments:\n\nhdr_override::Dict{Symbol,String}: Overrides the default headers.\ncolsep::Int: Number of spaces between columns (Default: 2)\n\nSee also log_row.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.log_row-Tuple{Any}","page":"Reference","title":"SolverCore.log_row","text":"log_row(vals)\n\nCreates a table row from the values on vals according to their types. Pass the names and types of vals to log_header for a logging table. Uses internal formatting specification given by SolverCore.formats.\n\nTo handle a missing value, add the type instead of the number:\n\n@info log_row(Any[1.0, 1])\n@info log_row(Any[Float64, Int])\n\nPrints\n\n[ Info:  1.0e+00       1\n[ Info:        -       -\n\nKeyword arguments:\n\ncolsep::Int: Number of spaces between columns (Default: 2)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.reset!-Tuple{AbstractSolver}","page":"Reference","title":"SolverCore.reset!","text":"reset!(solver::::AbstractSolver, model)\nreset!(solver::::AbstractSolver)\n\nUse in the context of restarting or reusing the solver structure. Reset the internal fields of solver for the model before calling solve! on the same structure. model must have the same number of variables, bounds and constraints as that used to instantiate solver.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.reset!-Union{Tuple{GenericExecutionStats{T, S, V, Tsp}}, Tuple{Tsp}, Tuple{V}, Tuple{S}, Tuple{T}} where {T, S, V, Tsp}","page":"Reference","title":"SolverCore.reset!","text":"reset!(stats::GenericExecutionStats)\nreset!(stats::GenericExecutionStats, problem)\n\nReset the internal flags of stats to false to Indicate that the contents should not be trusted.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.set_bounds_multipliers!-Union{Tuple{V}, Tuple{S}, Tuple{T}, Tuple{GenericExecutionStats{T, S, V}, V, V}} where {T, S, V}","page":"Reference","title":"SolverCore.set_bounds_multipliers!","text":"set_bounds_multipliers!(stats::GenericExecutionStats{T, S, V}, zL::V, zU::V)\n\nRegister zL and zU as optimal multipliers associated to lower-bounded and upper-bounded constraints, respectively, in stats and mark them as reliable.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.set_constraint_multipliers!-Union{Tuple{V}, Tuple{S}, Tuple{T}, Tuple{GenericExecutionStats{T, S, V}, S}} where {T, S, V}","page":"Reference","title":"SolverCore.set_constraint_multipliers!","text":"set_constraint_multipliers!(stats::GenericExecutionStats{T, S, V}, y::S, zL::V, zU::V)\n\nRegister y as optimal multipliers associated to general constraints in stats and mark them as reliable.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.set_dual_residual!-Union{Tuple{V}, Tuple{S}, Tuple{T}, Tuple{GenericExecutionStats{T, S, V}, T}} where {T, S, V}","page":"Reference","title":"SolverCore.set_dual_residual!","text":"set_dual_residual!(stats::GenericExecutionStats{T, S, V}, dual::T)\n\nRegister dual as optimal dual feasibility residuals in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.set_iter!-Tuple{GenericExecutionStats, Int64}","page":"Reference","title":"SolverCore.set_iter!","text":"set_iter!(stats::GenericExecutionStats, iter::Int)\n\nRegister iter as optimal iteration number in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.set_multipliers!-Union{Tuple{V}, Tuple{S}, Tuple{T}, Tuple{GenericExecutionStats{T, S, V}, S, V, V}} where {T, S, V}","page":"Reference","title":"SolverCore.set_multipliers!","text":"set_multipliers!(stats::GenericExecutionStats{T, S, V}, y::S, zL::V, zU::V)\n\nRegister y, zL and zU as optimal multipliers associated to general constraints, lower-bounded and upper-bounded constraints, respectively, in stats and mark them as reliable.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.set_objective!-Union{Tuple{V}, Tuple{S}, Tuple{T}, Tuple{GenericExecutionStats{T, S, V}, T}} where {T, S, V}","page":"Reference","title":"SolverCore.set_objective!","text":"set_objective!(stats::GenericExecutionStats{T, S, V}, val::T)\n\nRegister val as optimal objective value in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.set_primal_residual!-Union{Tuple{V}, Tuple{S}, Tuple{T}, Tuple{GenericExecutionStats{T, S, V}, T}} where {T, S, V}","page":"Reference","title":"SolverCore.set_primal_residual!","text":"set_primal_residual!(stats::GenericExecutionStats{T, S, V}, primal::T)\n\nRegister primal as optimal primal residuals in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.set_residuals!-Union{Tuple{V}, Tuple{S}, Tuple{T}, Tuple{GenericExecutionStats{T, S, V}, T, T}} where {T, S, V}","page":"Reference","title":"SolverCore.set_residuals!","text":"set_residuals!(stats::GenericExecutionStats{T, S, V}, primal::T, dual::T)\n\nRegister primal and dual as optimal primal and dual feasibility residuals, respectively, in stats and mark them as reliable.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.set_solution!-Tuple{GenericExecutionStats, AbstractVector}","page":"Reference","title":"SolverCore.set_solution!","text":"set_solution!(stats::GenericExecutionStats, x::AbstractVector)\n\nRegister x as optimal solution in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.set_solver_specific!-Tuple{GenericExecutionStats, Symbol, Any}","page":"Reference","title":"SolverCore.set_solver_specific!","text":"set_solver_specific!(stats::GenericExecutionStats, field::Symbol, value)\n\nRegister value as a solver-specific value identified by field in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.set_status!-Tuple{GenericExecutionStats, Symbol}","page":"Reference","title":"SolverCore.set_status!","text":"set_status!(stats::GenericExecutionStats, status::Symbol)\n\nRegister status as final status in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.set_time!-Tuple{GenericExecutionStats, Float64}","page":"Reference","title":"SolverCore.set_time!","text":"set_time!(stats::GenericExecutionStats, time::Float64)\n\nRegister time as optimal solution time in stats and mark it as reliable.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.show_statuses-Tuple{}","page":"Reference","title":"SolverCore.show_statuses","text":"show_statuses()\n\nShow the list of available statuses to use with GenericExecutionStats.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SolverCore.solve!-Tuple{AbstractSolver, Any}","page":"Reference","title":"SolverCore.solve!","text":"solve!(solver, model; kwargs...)\nsolve!(solver, model, stats; kwargs...)\n\nApply solver to model.\n\nArguments\n\nsolver::::AbstractSolver: solver structure to hold all storage necessary for a solve\nmodel: the model solved\nstats::GenericExecutionStats: stats structure to hold solution information.\n\nThe first invocation allocates and returns a new GenericExecutionStats. The second one fills out a preallocated stats structure and allows for efficient re-solves.\n\nThe kwargs are passed to the solver.\n\nReturn Value\n\nstats::GenericExecutionStats: stats structure holding solution information.\n\n\n\n\n\n","category":"method"},{"location":"90-contributing/#contributing","page":"Contributing guidelines","title":"Contributing guidelines","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"First of all, thanks for the interest!","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"Be polite and respectful, and follow the code of conduct.","category":"page"},{"location":"90-contributing/#Bug-reports-and-discussions","page":"Contributing guidelines","title":"Bug reports and discussions","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"90-contributing/#Working-on-an-issue","page":"Contributing guidelines","title":"Working on an issue","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"tip: Tip\nFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"","page":"SolverCore","title":"SolverCore","text":"CurrentModule = SolverCore","category":"page"},{"location":"#SolverCore","page":"SolverCore","title":"SolverCore","text":"","category":"section"},{"location":"","page":"SolverCore","title":"SolverCore","text":"Documentation for SolverCore.","category":"page"},{"location":"","page":"SolverCore","title":"SolverCore","text":"Core package to build novel algorithms in Julia.","category":"page"},{"location":"#Contributors","page":"SolverCore","title":"Contributors","text":"","category":"section"},{"location":"","page":"SolverCore","title":"SolverCore","text":"<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->","category":"page"}]
}
